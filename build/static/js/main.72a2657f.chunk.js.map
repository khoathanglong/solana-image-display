{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","useEffect","onLoad","a","checkIfWalletIsConnected","window","addEventListener","removeEventListener","console","log","getGifList","createGifAccount","provider","getProvider","program","Program","rpc","startStuffOff","accounts","publicKey","user","wallet","systemProgram","programId","signers","toString","account","fetch","solana","isPhantom","connect","onlyIfTrusted","response","alert","error","connectWallet","connection","Connection","Provider","onInputChange","event","value","target","sendGif","length","addGif","startVote","item","gifLink","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","index","src","style","color","userAddress","vote","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72a2657f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport kp from './keypair.json'\n\n// Constants\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = [\n  'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n  'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n  'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n  'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      \n      // Call Solana program here.\n  \n      // Set state\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n  // Actions\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n  \n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n        if (solana?.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n  const startVote= async (item) => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.startVote(item.gifLink, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  }\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n      if (gifList === null) {\n        return (\n          <div className=\"connected-container\">\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n              Do One-Time Initialization For GIF Program Account\n            </button>\n          </div>\n        )\n      } \n      // Otherwise, we're good! Account exists. User can submit GIFs.\n      else {\n        return(\n          <div className=\"connected-container\">\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                sendGif();\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter gif link!\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                Submit\n              </button>\n            </form>\n            <div className=\"gif-grid\">\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\n              {gifList.map((item, index) => (\n                <div className=\"gif-item\" key={index}>\n                  <img src={item.gifLink} />\n                  <div>\n                    <div style={{color: 'white'}}>uploaded by: {item.userAddress?.toString()}</div>\n                    <button onClick={() => startVote(item)}>vote {item.vote || 0}</button> \n                    </div> \n          \n                </div>\n              ))}\n            </div>\n          </div>\n        )\n      }\n    }\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}